// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _strm_words2bytes_HH_
#define _strm_words2bytes_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct strm_words2bytes : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > bytes_out_V_TDATA;
    sc_out< sc_logic > bytes_out_V_TVALID;
    sc_in< sc_logic > bytes_out_V_TREADY;
    sc_in< sc_lv<32> > words_in_V_dout;
    sc_in< sc_logic > words_in_V_empty_n;
    sc_out< sc_logic > words_in_V_read;
    sc_in< sc_lv<14> > bytes_out_len_loc_dout;
    sc_in< sc_logic > bytes_out_len_loc_empty_n;
    sc_out< sc_logic > bytes_out_len_loc_read;


    // Module declarations
    strm_words2bytes(sc_module_name name);
    SC_HAS_PROCESS(strm_words2bytes);

    ~strm_words2bytes();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > bytes_out_V_1_data_out;
    sc_signal< sc_logic > bytes_out_V_1_vld_in;
    sc_signal< sc_logic > bytes_out_V_1_vld_out;
    sc_signal< sc_logic > bytes_out_V_1_ack_in;
    sc_signal< sc_logic > bytes_out_V_1_ack_out;
    sc_signal< sc_lv<8> > bytes_out_V_1_payload_A;
    sc_signal< sc_lv<8> > bytes_out_V_1_payload_B;
    sc_signal< sc_logic > bytes_out_V_1_sel_rd;
    sc_signal< sc_logic > bytes_out_V_1_sel_wr;
    sc_signal< sc_logic > bytes_out_V_1_sel;
    sc_signal< sc_logic > bytes_out_V_1_load_A;
    sc_signal< sc_logic > bytes_out_V_1_load_B;
    sc_signal< sc_lv<2> > bytes_out_V_1_state;
    sc_signal< sc_logic > bytes_out_V_1_state_cmp_full;
    sc_signal< sc_logic > bytes_out_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_i_i_fu_144_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > words_in_V_blk_n;
    sc_signal< sc_lv<1> > tmp_2_i_i_fu_155_p2;
    sc_signal< sc_logic > bytes_out_len_loc_blk_n;
    sc_signal< sc_lv<17> > tmp_cast_i_i_fu_124_p1;
    sc_signal< sc_lv<17> > tmp_cast_i_i_reg_187;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<16> > i_fu_149_p2;
    sc_signal< sc_lv<16> > i_reg_195;
    sc_signal< bool > ap_predicate_op25_read_state2;
    sc_signal< bool > ap_block_state2;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_lv<8> > tmpbyte_fu_161_p1;
    sc_signal< sc_lv<16> > i_i_i_reg_103;
    sc_signal< sc_lv<32> > ap_phi_mux_p_0_1_i_i_phi_fu_117_p4;
    sc_signal< sc_lv<32> > p_0_cast_i_i_fu_131_p1;
    sc_signal< sc_lv<24> > p_0_i_i_fu_80;
    sc_signal< sc_lv<17> > i_cast_i_i_fu_140_p1;
    sc_signal< sc_lv<2> > tmp_fu_136_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_1F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_block_state2_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_p_0_1_i_i_phi_fu_117_p4();
    void thread_ap_predicate_op25_read_state2();
    void thread_ap_ready();
    void thread_bytes_out_V_1_ack_in();
    void thread_bytes_out_V_1_ack_out();
    void thread_bytes_out_V_1_data_out();
    void thread_bytes_out_V_1_load_A();
    void thread_bytes_out_V_1_load_B();
    void thread_bytes_out_V_1_sel();
    void thread_bytes_out_V_1_state_cmp_full();
    void thread_bytes_out_V_1_vld_in();
    void thread_bytes_out_V_1_vld_out();
    void thread_bytes_out_V_TDATA();
    void thread_bytes_out_V_TDATA_blk_n();
    void thread_bytes_out_V_TVALID();
    void thread_bytes_out_len_loc_blk_n();
    void thread_bytes_out_len_loc_read();
    void thread_exitcond_i_i_fu_144_p2();
    void thread_i_cast_i_i_fu_140_p1();
    void thread_i_fu_149_p2();
    void thread_p_0_cast_i_i_fu_131_p1();
    void thread_tmp_2_i_i_fu_155_p2();
    void thread_tmp_cast_i_i_fu_124_p1();
    void thread_tmp_fu_136_p1();
    void thread_tmpbyte_fu_161_p1();
    void thread_words_in_V_blk_n();
    void thread_words_in_V_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
