// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "strm_words2bytes.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic strm_words2bytes::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic strm_words2bytes::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> strm_words2bytes::ap_ST_fsm_state1 = "1";
const sc_lv<3> strm_words2bytes::ap_ST_fsm_state2 = "10";
const sc_lv<3> strm_words2bytes::ap_ST_fsm_state3 = "100";
const sc_lv<32> strm_words2bytes::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool strm_words2bytes::ap_const_boolean_1 = true;
const sc_lv<1> strm_words2bytes::ap_const_lv1_0 = "0";
const sc_lv<1> strm_words2bytes::ap_const_lv1_1 = "1";
const sc_lv<2> strm_words2bytes::ap_const_lv2_0 = "00";
const sc_lv<2> strm_words2bytes::ap_const_lv2_2 = "10";
const sc_lv<2> strm_words2bytes::ap_const_lv2_3 = "11";
const sc_lv<2> strm_words2bytes::ap_const_lv2_1 = "1";
const sc_lv<32> strm_words2bytes::ap_const_lv32_1 = "1";
const sc_lv<32> strm_words2bytes::ap_const_lv32_2 = "10";
const sc_lv<16> strm_words2bytes::ap_const_lv16_0 = "0000000000000000";
const sc_lv<16> strm_words2bytes::ap_const_lv16_1 = "1";
const sc_lv<32> strm_words2bytes::ap_const_lv32_8 = "1000";
const sc_lv<32> strm_words2bytes::ap_const_lv32_1F = "11111";

strm_words2bytes::strm_words2bytes(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( bytes_out_len_loc_empty_n );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( bytes_out_V_1_ack_in );
    sensitive << ( words_in_V_empty_n );
    sensitive << ( ap_predicate_op25_read_state2 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( bytes_out_V_1_ack_in );
    sensitive << ( exitcond_i_i_fu_144_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( bytes_out_V_1_ack_in );
    sensitive << ( words_in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_i_fu_144_p2 );
    sensitive << ( ap_predicate_op25_read_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_p_0_1_i_i_phi_fu_117_p4);
    sensitive << ( words_in_V_dout );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_i_fu_144_p2 );
    sensitive << ( tmp_2_i_i_fu_155_p2 );
    sensitive << ( p_0_cast_i_i_fu_131_p1 );

    SC_METHOD(thread_ap_predicate_op25_read_state2);
    sensitive << ( exitcond_i_i_fu_144_p2 );
    sensitive << ( tmp_2_i_i_fu_155_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( bytes_out_V_1_ack_in );
    sensitive << ( words_in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_i_fu_144_p2 );
    sensitive << ( ap_predicate_op25_read_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_bytes_out_V_1_ack_in);
    sensitive << ( bytes_out_V_1_state );

    SC_METHOD(thread_bytes_out_V_1_ack_out);
    sensitive << ( bytes_out_V_TREADY );

    SC_METHOD(thread_bytes_out_V_1_data_out);
    sensitive << ( bytes_out_V_1_payload_A );
    sensitive << ( bytes_out_V_1_payload_B );
    sensitive << ( bytes_out_V_1_sel );

    SC_METHOD(thread_bytes_out_V_1_load_A);
    sensitive << ( bytes_out_V_1_sel_wr );
    sensitive << ( bytes_out_V_1_state_cmp_full );

    SC_METHOD(thread_bytes_out_V_1_load_B);
    sensitive << ( bytes_out_V_1_sel_wr );
    sensitive << ( bytes_out_V_1_state_cmp_full );

    SC_METHOD(thread_bytes_out_V_1_sel);
    sensitive << ( bytes_out_V_1_sel_rd );

    SC_METHOD(thread_bytes_out_V_1_state_cmp_full);
    sensitive << ( bytes_out_V_1_state );

    SC_METHOD(thread_bytes_out_V_1_vld_in);
    sensitive << ( bytes_out_V_1_ack_in );
    sensitive << ( words_in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_i_fu_144_p2 );
    sensitive << ( ap_predicate_op25_read_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_bytes_out_V_1_vld_out);
    sensitive << ( bytes_out_V_1_state );

    SC_METHOD(thread_bytes_out_V_TDATA);
    sensitive << ( bytes_out_V_1_data_out );

    SC_METHOD(thread_bytes_out_V_TDATA_blk_n);
    sensitive << ( bytes_out_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_i_fu_144_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_bytes_out_V_TVALID);
    sensitive << ( bytes_out_V_1_state );

    SC_METHOD(thread_bytes_out_len_loc_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( bytes_out_len_loc_empty_n );

    SC_METHOD(thread_bytes_out_len_loc_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( bytes_out_len_loc_empty_n );

    SC_METHOD(thread_exitcond_i_i_fu_144_p2);
    sensitive << ( bytes_out_V_1_ack_in );
    sensitive << ( words_in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_cast_i_i_reg_187 );
    sensitive << ( ap_predicate_op25_read_state2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( i_cast_i_i_fu_140_p1 );

    SC_METHOD(thread_i_cast_i_i_fu_140_p1);
    sensitive << ( i_i_i_reg_103 );

    SC_METHOD(thread_i_fu_149_p2);
    sensitive << ( i_i_i_reg_103 );

    SC_METHOD(thread_p_0_cast_i_i_fu_131_p1);
    sensitive << ( p_0_i_i_fu_80 );

    SC_METHOD(thread_tmp_2_i_i_fu_155_p2);
    sensitive << ( bytes_out_V_1_ack_in );
    sensitive << ( words_in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_i_fu_144_p2 );
    sensitive << ( ap_predicate_op25_read_state2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( tmp_fu_136_p1 );

    SC_METHOD(thread_tmp_cast_i_i_fu_124_p1);
    sensitive << ( bytes_out_len_loc_dout );

    SC_METHOD(thread_tmp_fu_136_p1);
    sensitive << ( i_i_i_reg_103 );

    SC_METHOD(thread_tmpbyte_fu_161_p1);
    sensitive << ( ap_phi_mux_p_0_1_i_i_phi_fu_117_p4 );

    SC_METHOD(thread_words_in_V_blk_n);
    sensitive << ( words_in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_i_fu_144_p2 );
    sensitive << ( tmp_2_i_i_fu_155_p2 );

    SC_METHOD(thread_words_in_V_read);
    sensitive << ( bytes_out_V_1_ack_in );
    sensitive << ( words_in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_predicate_op25_read_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( bytes_out_V_1_ack_in );
    sensitive << ( words_in_V_empty_n );
    sensitive << ( bytes_out_len_loc_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_i_fu_144_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_predicate_op25_read_state2 );
    sensitive << ( ap_block_state2_io );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    bytes_out_V_1_sel_rd = SC_LOGIC_0;
    bytes_out_V_1_sel_wr = SC_LOGIC_0;
    bytes_out_V_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "strm_words2bytes_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, bytes_out_V_TDATA, "(port)bytes_out_V_TDATA");
    sc_trace(mVcdFile, bytes_out_V_TVALID, "(port)bytes_out_V_TVALID");
    sc_trace(mVcdFile, bytes_out_V_TREADY, "(port)bytes_out_V_TREADY");
    sc_trace(mVcdFile, words_in_V_dout, "(port)words_in_V_dout");
    sc_trace(mVcdFile, words_in_V_empty_n, "(port)words_in_V_empty_n");
    sc_trace(mVcdFile, words_in_V_read, "(port)words_in_V_read");
    sc_trace(mVcdFile, bytes_out_len_loc_dout, "(port)bytes_out_len_loc_dout");
    sc_trace(mVcdFile, bytes_out_len_loc_empty_n, "(port)bytes_out_len_loc_empty_n");
    sc_trace(mVcdFile, bytes_out_len_loc_read, "(port)bytes_out_len_loc_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, bytes_out_V_1_data_out, "bytes_out_V_1_data_out");
    sc_trace(mVcdFile, bytes_out_V_1_vld_in, "bytes_out_V_1_vld_in");
    sc_trace(mVcdFile, bytes_out_V_1_vld_out, "bytes_out_V_1_vld_out");
    sc_trace(mVcdFile, bytes_out_V_1_ack_in, "bytes_out_V_1_ack_in");
    sc_trace(mVcdFile, bytes_out_V_1_ack_out, "bytes_out_V_1_ack_out");
    sc_trace(mVcdFile, bytes_out_V_1_payload_A, "bytes_out_V_1_payload_A");
    sc_trace(mVcdFile, bytes_out_V_1_payload_B, "bytes_out_V_1_payload_B");
    sc_trace(mVcdFile, bytes_out_V_1_sel_rd, "bytes_out_V_1_sel_rd");
    sc_trace(mVcdFile, bytes_out_V_1_sel_wr, "bytes_out_V_1_sel_wr");
    sc_trace(mVcdFile, bytes_out_V_1_sel, "bytes_out_V_1_sel");
    sc_trace(mVcdFile, bytes_out_V_1_load_A, "bytes_out_V_1_load_A");
    sc_trace(mVcdFile, bytes_out_V_1_load_B, "bytes_out_V_1_load_B");
    sc_trace(mVcdFile, bytes_out_V_1_state, "bytes_out_V_1_state");
    sc_trace(mVcdFile, bytes_out_V_1_state_cmp_full, "bytes_out_V_1_state_cmp_full");
    sc_trace(mVcdFile, bytes_out_V_TDATA_blk_n, "bytes_out_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_i_i_fu_144_p2, "exitcond_i_i_fu_144_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, words_in_V_blk_n, "words_in_V_blk_n");
    sc_trace(mVcdFile, tmp_2_i_i_fu_155_p2, "tmp_2_i_i_fu_155_p2");
    sc_trace(mVcdFile, bytes_out_len_loc_blk_n, "bytes_out_len_loc_blk_n");
    sc_trace(mVcdFile, tmp_cast_i_i_fu_124_p1, "tmp_cast_i_i_fu_124_p1");
    sc_trace(mVcdFile, tmp_cast_i_i_reg_187, "tmp_cast_i_i_reg_187");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, i_fu_149_p2, "i_fu_149_p2");
    sc_trace(mVcdFile, i_reg_195, "i_reg_195");
    sc_trace(mVcdFile, ap_predicate_op25_read_state2, "ap_predicate_op25_read_state2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, tmpbyte_fu_161_p1, "tmpbyte_fu_161_p1");
    sc_trace(mVcdFile, i_i_i_reg_103, "i_i_i_reg_103");
    sc_trace(mVcdFile, ap_phi_mux_p_0_1_i_i_phi_fu_117_p4, "ap_phi_mux_p_0_1_i_i_phi_fu_117_p4");
    sc_trace(mVcdFile, p_0_cast_i_i_fu_131_p1, "p_0_cast_i_i_fu_131_p1");
    sc_trace(mVcdFile, p_0_i_i_fu_80, "p_0_i_i_fu_80");
    sc_trace(mVcdFile, i_cast_i_i_fu_140_p1, "i_cast_i_i_fu_140_p1");
    sc_trace(mVcdFile, tmp_fu_136_p1, "tmp_fu_136_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

strm_words2bytes::~strm_words2bytes() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void strm_words2bytes::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !((esl_seteq<1,1,1>(ap_const_logic_0, words_in_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state2.read())) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_i_fu_144_p2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        bytes_out_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, bytes_out_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, bytes_out_V_1_vld_out.read()))) {
            bytes_out_V_1_sel_rd =  (sc_logic) (~bytes_out_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        bytes_out_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, bytes_out_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, bytes_out_V_1_ack_in.read()))) {
            bytes_out_V_1_sel_wr =  (sc_logic) (~bytes_out_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        bytes_out_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, bytes_out_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(bytes_out_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(bytes_out_V_1_state.read(), ap_const_lv2_2)))) {
            bytes_out_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, bytes_out_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(bytes_out_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(bytes_out_V_1_state.read(), ap_const_lv2_1)))) {
            bytes_out_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, bytes_out_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(bytes_out_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, bytes_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(bytes_out_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(bytes_out_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, bytes_out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, bytes_out_V_1_ack_out.read()))))) {
            bytes_out_V_1_state = ap_const_lv2_3;
        } else {
            bytes_out_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(bytes_out_V_1_ack_in.read(), ap_const_logic_1))) {
        i_i_i_reg_103 = i_reg_195.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_len_loc_empty_n.read())))) {
        i_i_i_reg_103 = ap_const_lv16_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, bytes_out_V_1_load_A.read())) {
        bytes_out_V_1_payload_A = tmpbyte_fu_161_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, bytes_out_V_1_load_B.read())) {
        bytes_out_V_1_payload_B = tmpbyte_fu_161_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, words_in_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state2.read())) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        i_reg_195 = i_fu_149_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_144_p2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, words_in_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state2.read())) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        p_0_i_i_fu_80 = ap_phi_mux_p_0_1_i_i_phi_fu_117_p4.read().range(31, 8);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_len_loc_empty_n.read())))) {
        tmp_cast_i_i_reg_187 = tmp_cast_i_i_fu_124_p1.read();
    }
}

void strm_words2bytes::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void strm_words2bytes::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void strm_words2bytes::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void strm_words2bytes::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_len_loc_empty_n.read()));
}

void strm_words2bytes::thread_ap_block_state2() {
    ap_block_state2 = ((esl_seteq<1,1,1>(ap_const_logic_0, words_in_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state2.read())) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_in.read()));
}

void strm_words2bytes::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_144_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_in.read()));
}

void strm_words2bytes::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, words_in_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state2.read())) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_i_fu_144_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void strm_words2bytes::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void strm_words2bytes::thread_ap_phi_mux_p_0_1_i_i_phi_fu_117_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_144_p2.read()))) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_i_i_fu_155_p2.read())) {
            ap_phi_mux_p_0_1_i_i_phi_fu_117_p4 = p_0_cast_i_i_fu_131_p1.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_i_i_fu_155_p2.read())) {
            ap_phi_mux_p_0_1_i_i_phi_fu_117_p4 = words_in_V_dout.read();
        } else {
            ap_phi_mux_p_0_1_i_i_phi_fu_117_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        ap_phi_mux_p_0_1_i_i_phi_fu_117_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void strm_words2bytes::thread_ap_predicate_op25_read_state2() {
    ap_predicate_op25_read_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_144_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_i_i_fu_155_p2.read()));
}

void strm_words2bytes::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, words_in_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state2.read())) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_i_fu_144_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void strm_words2bytes::thread_bytes_out_V_1_ack_in() {
    bytes_out_V_1_ack_in = bytes_out_V_1_state.read()[1];
}

void strm_words2bytes::thread_bytes_out_V_1_ack_out() {
    bytes_out_V_1_ack_out = bytes_out_V_TREADY.read();
}

void strm_words2bytes::thread_bytes_out_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, bytes_out_V_1_sel.read())) {
        bytes_out_V_1_data_out = bytes_out_V_1_payload_B.read();
    } else {
        bytes_out_V_1_data_out = bytes_out_V_1_payload_A.read();
    }
}

void strm_words2bytes::thread_bytes_out_V_1_load_A() {
    bytes_out_V_1_load_A = (bytes_out_V_1_state_cmp_full.read() & ~bytes_out_V_1_sel_wr.read());
}

void strm_words2bytes::thread_bytes_out_V_1_load_B() {
    bytes_out_V_1_load_B = (bytes_out_V_1_sel_wr.read() & bytes_out_V_1_state_cmp_full.read());
}

void strm_words2bytes::thread_bytes_out_V_1_sel() {
    bytes_out_V_1_sel = bytes_out_V_1_sel_rd.read();
}

void strm_words2bytes::thread_bytes_out_V_1_state_cmp_full() {
    bytes_out_V_1_state_cmp_full =  (sc_logic) ((!bytes_out_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(bytes_out_V_1_state.read() != ap_const_lv2_1))[0];
}

void strm_words2bytes::thread_bytes_out_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_144_p2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, words_in_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state2.read())) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        bytes_out_V_1_vld_in = ap_const_logic_1;
    } else {
        bytes_out_V_1_vld_in = ap_const_logic_0;
    }
}

void strm_words2bytes::thread_bytes_out_V_1_vld_out() {
    bytes_out_V_1_vld_out = bytes_out_V_1_state.read()[0];
}

void strm_words2bytes::thread_bytes_out_V_TDATA() {
    bytes_out_V_TDATA = bytes_out_V_1_data_out.read();
}

void strm_words2bytes::thread_bytes_out_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_144_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        bytes_out_V_TDATA_blk_n = bytes_out_V_1_state.read()[1];
    } else {
        bytes_out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void strm_words2bytes::thread_bytes_out_V_TVALID() {
    bytes_out_V_TVALID = bytes_out_V_1_state.read()[0];
}

void strm_words2bytes::thread_bytes_out_len_loc_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        bytes_out_len_loc_blk_n = bytes_out_len_loc_empty_n.read();
    } else {
        bytes_out_len_loc_blk_n = ap_const_logic_1;
    }
}

void strm_words2bytes::thread_bytes_out_len_loc_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_len_loc_empty_n.read())))) {
        bytes_out_len_loc_read = ap_const_logic_1;
    } else {
        bytes_out_len_loc_read = ap_const_logic_0;
    }
}

void strm_words2bytes::thread_exitcond_i_i_fu_144_p2() {
    exitcond_i_i_fu_144_p2 = (!i_cast_i_i_fu_140_p1.read().is_01() || !tmp_cast_i_i_reg_187.read().is_01())? sc_lv<1>(): sc_lv<1>(i_cast_i_i_fu_140_p1.read() == tmp_cast_i_i_reg_187.read());
}

void strm_words2bytes::thread_i_cast_i_i_fu_140_p1() {
    i_cast_i_i_fu_140_p1 = esl_zext<17,16>(i_i_i_reg_103.read());
}

void strm_words2bytes::thread_i_fu_149_p2() {
    i_fu_149_p2 = (!ap_const_lv16_1.is_01() || !i_i_i_reg_103.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_1) + sc_biguint<16>(i_i_i_reg_103.read()));
}

void strm_words2bytes::thread_p_0_cast_i_i_fu_131_p1() {
    p_0_cast_i_i_fu_131_p1 = esl_zext<32,24>(p_0_i_i_fu_80.read());
}

void strm_words2bytes::thread_tmp_2_i_i_fu_155_p2() {
    tmp_2_i_i_fu_155_p2 = (!tmp_fu_136_p1.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_136_p1.read() == ap_const_lv2_0);
}

void strm_words2bytes::thread_tmp_cast_i_i_fu_124_p1() {
    tmp_cast_i_i_fu_124_p1 = esl_zext<17,14>(bytes_out_len_loc_dout.read());
}

void strm_words2bytes::thread_tmp_fu_136_p1() {
    tmp_fu_136_p1 = i_i_i_reg_103.read().range(2-1, 0);
}

void strm_words2bytes::thread_tmpbyte_fu_161_p1() {
    tmpbyte_fu_161_p1 = ap_phi_mux_p_0_1_i_i_phi_fu_117_p4.read().range(8-1, 0);
}

void strm_words2bytes::thread_words_in_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_144_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_i_i_fu_155_p2.read()))) {
        words_in_V_blk_n = words_in_V_empty_n.read();
    } else {
        words_in_V_blk_n = ap_const_logic_1;
    }
}

void strm_words2bytes::thread_words_in_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, words_in_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state2.read())) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        words_in_V_read = ap_const_logic_1;
    } else {
        words_in_V_read = ap_const_logic_0;
    }
}

void strm_words2bytes::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_len_loc_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, words_in_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state2.read())) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_i_fu_144_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_144_p2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, words_in_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state2.read())) || esl_seteq<1,1,1>(ap_const_logic_0, bytes_out_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(bytes_out_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

