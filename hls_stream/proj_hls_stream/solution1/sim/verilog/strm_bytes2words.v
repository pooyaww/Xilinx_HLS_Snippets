// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module strm_bytes2words (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        words_out_V_din,
        words_out_V_full_n,
        words_out_V_write,
        bytes_in_V_TDATA,
        bytes_in_V_TVALID,
        bytes_in_V_TREADY,
        bytestrm_len_dout,
        bytestrm_len_empty_n,
        bytestrm_len_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] words_out_V_din;
input   words_out_V_full_n;
output   words_out_V_write;
input  [7:0] bytes_in_V_TDATA;
input   bytes_in_V_TVALID;
output   bytes_in_V_TREADY;
input  [15:0] bytestrm_len_dout;
input   bytestrm_len_empty_n;
output   bytestrm_len_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg words_out_V_write;
reg bytestrm_len_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] bytes_in_V_0_data_out;
wire    bytes_in_V_0_vld_in;
wire    bytes_in_V_0_vld_out;
wire    bytes_in_V_0_ack_in;
reg    bytes_in_V_0_ack_out;
reg   [7:0] bytes_in_V_0_payload_A;
reg   [7:0] bytes_in_V_0_payload_B;
reg    bytes_in_V_0_sel_rd;
reg    bytes_in_V_0_sel_wr;
wire    bytes_in_V_0_sel;
wire    bytes_in_V_0_load_A;
wire    bytes_in_V_0_load_B;
reg   [1:0] bytes_in_V_0_state;
wire    bytes_in_V_0_state_cmp_full;
reg    words_out_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_i_fu_131_p2;
wire   [0:0] tmp_1_i_fu_151_p2;
reg    bytes_in_V_TDATA_blk_n;
reg    bytestrm_len_blk_n;
reg   [15:0] bytestrm_len_read_reg_175;
reg    ap_block_state1;
wire   [15:0] i_fu_136_p2;
reg    ap_predicate_op22_write_state2;
reg    ap_block_state2;
wire   [23:0] phitmp_cast_i_fu_167_p3;
reg   [23:0] r_V_reg_105;
reg   [15:0] i_i_reg_116;
wire   [1:0] tmp_fu_127_p1;
wire   [15:0] tmp_5_fu_157_p4;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 bytes_in_V_0_sel_rd = 1'b0;
#0 bytes_in_V_0_sel_wr = 1'b0;
#0 bytes_in_V_0_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((words_out_V_full_n == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1)) | ((exitcond_i_fu_131_p2 == 1'd0) & (bytes_in_V_0_vld_out == 1'b0))) & (exitcond_i_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        bytes_in_V_0_sel_rd <= 1'b0;
    end else begin
        if (((bytes_in_V_0_ack_out == 1'b1) & (bytes_in_V_0_vld_out == 1'b1))) begin
            bytes_in_V_0_sel_rd <= ~bytes_in_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        bytes_in_V_0_sel_wr <= 1'b0;
    end else begin
        if (((bytes_in_V_0_ack_in == 1'b1) & (bytes_in_V_0_vld_in == 1'b1))) begin
            bytes_in_V_0_sel_wr <= ~bytes_in_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        bytes_in_V_0_state <= 2'd0;
    end else begin
        if ((((bytes_in_V_0_state == 2'd2) & (bytes_in_V_0_vld_in == 1'b0)) | ((bytes_in_V_0_state == 2'd3) & (bytes_in_V_0_vld_in == 1'b0) & (bytes_in_V_0_ack_out == 1'b1)))) begin
            bytes_in_V_0_state <= 2'd2;
        end else if ((((bytes_in_V_0_state == 2'd1) & (bytes_in_V_0_ack_out == 1'b0)) | ((bytes_in_V_0_state == 2'd3) & (bytes_in_V_0_ack_out == 1'b0) & (bytes_in_V_0_vld_in == 1'b1)))) begin
            bytes_in_V_0_state <= 2'd1;
        end else if (((~((bytes_in_V_0_vld_in == 1'b0) & (bytes_in_V_0_ack_out == 1'b1)) & ~((bytes_in_V_0_ack_out == 1'b0) & (bytes_in_V_0_vld_in == 1'b1)) & (bytes_in_V_0_state == 2'd3)) | ((bytes_in_V_0_state == 2'd1) & (bytes_in_V_0_ack_out == 1'b1)) | ((bytes_in_V_0_state == 2'd2) & (bytes_in_V_0_vld_in == 1'b1)))) begin
            bytes_in_V_0_state <= 2'd3;
        end else begin
            bytes_in_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(((words_out_V_full_n == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1)) | ((exitcond_i_fu_131_p2 == 1'd0) & (bytes_in_V_0_vld_out == 1'b0))) & (exitcond_i_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_i_reg_116 <= i_fu_136_p2;
    end else if ((~((bytestrm_len_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_116 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((words_out_V_full_n == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1)) | ((exitcond_i_fu_131_p2 == 1'd0) & (bytes_in_V_0_vld_out == 1'b0))) & (exitcond_i_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_V_reg_105 <= phitmp_cast_i_fu_167_p3;
    end else if ((~((bytestrm_len_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_V_reg_105 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((bytes_in_V_0_load_A == 1'b1)) begin
        bytes_in_V_0_payload_A <= bytes_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((bytes_in_V_0_load_B == 1'b1)) begin
        bytes_in_V_0_payload_B <= bytes_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((bytestrm_len_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bytestrm_len_read_reg_175 <= bytestrm_len_dout;
    end
end

always @ (*) begin
    if ((~(((words_out_V_full_n == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1)) | ((exitcond_i_fu_131_p2 == 1'd0) & (bytes_in_V_0_vld_out == 1'b0))) & (exitcond_i_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((words_out_V_full_n == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1)) | ((exitcond_i_fu_131_p2 == 1'd0) & (bytes_in_V_0_vld_out == 1'b0))) & (exitcond_i_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(((words_out_V_full_n == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1)) | ((exitcond_i_fu_131_p2 == 1'd0) & (bytes_in_V_0_vld_out == 1'b0))) & (exitcond_i_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bytes_in_V_0_ack_out = 1'b1;
    end else begin
        bytes_in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((bytes_in_V_0_sel == 1'b1)) begin
        bytes_in_V_0_data_out = bytes_in_V_0_payload_B;
    end else begin
        bytes_in_V_0_data_out = bytes_in_V_0_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bytes_in_V_TDATA_blk_n = bytes_in_V_0_state[1'd0];
    end else begin
        bytes_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bytestrm_len_blk_n = bytestrm_len_empty_n;
    end else begin
        bytestrm_len_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((bytestrm_len_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bytestrm_len_read = 1'b1;
    end else begin
        bytestrm_len_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_i_fu_151_p2 == 1'd1) & (exitcond_i_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        words_out_V_blk_n = words_out_V_full_n;
    end else begin
        words_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((words_out_V_full_n == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1)) | ((exitcond_i_fu_131_p2 == 1'd0) & (bytes_in_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op22_write_state2 == 1'b1))) begin
        words_out_V_write = 1'b1;
    end else begin
        words_out_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((bytestrm_len_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((words_out_V_full_n == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1)) | ((exitcond_i_fu_131_p2 == 1'd0) & (bytes_in_V_0_vld_out == 1'b0))) & (exitcond_i_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((words_out_V_full_n == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1)) | ((exitcond_i_fu_131_p2 == 1'd0) & (bytes_in_V_0_vld_out == 1'b0))) & (exitcond_i_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((bytestrm_len_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((words_out_V_full_n == 1'b0) & (ap_predicate_op22_write_state2 == 1'b1)) | ((exitcond_i_fu_131_p2 == 1'd0) & (bytes_in_V_0_vld_out == 1'b0)));
end

always @ (*) begin
    ap_predicate_op22_write_state2 = ((tmp_1_i_fu_151_p2 == 1'd1) & (exitcond_i_fu_131_p2 == 1'd0));
end

assign bytes_in_V_0_ack_in = bytes_in_V_0_state[1'd1];

assign bytes_in_V_0_load_A = (~bytes_in_V_0_sel_wr & bytes_in_V_0_state_cmp_full);

assign bytes_in_V_0_load_B = (bytes_in_V_0_state_cmp_full & bytes_in_V_0_sel_wr);

assign bytes_in_V_0_sel = bytes_in_V_0_sel_rd;

assign bytes_in_V_0_state_cmp_full = ((bytes_in_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign bytes_in_V_0_vld_in = bytes_in_V_TVALID;

assign bytes_in_V_0_vld_out = bytes_in_V_0_state[1'd0];

assign bytes_in_V_TREADY = bytes_in_V_0_state[1'd1];

assign exitcond_i_fu_131_p2 = ((i_i_reg_116 == bytestrm_len_read_reg_175) ? 1'b1 : 1'b0);

assign i_fu_136_p2 = (16'd1 + i_i_reg_116);

assign phitmp_cast_i_fu_167_p3 = {{bytes_in_V_0_data_out}, {tmp_5_fu_157_p4}};

assign tmp_1_i_fu_151_p2 = ((tmp_fu_127_p1 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_5_fu_157_p4 = {{r_V_reg_105[23:8]}};

assign tmp_fu_127_p1 = i_i_reg_116[1:0];

assign words_out_V_din = {{bytes_in_V_0_data_out}, {r_V_reg_105}};

endmodule //strm_bytes2words
