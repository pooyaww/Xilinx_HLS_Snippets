// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module strm_words2bytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        bytes_out_V_TDATA,
        bytes_out_V_TVALID,
        bytes_out_V_TREADY,
        words_in_V_dout,
        words_in_V_empty_n,
        words_in_V_read,
        bytes_out_len_loc_dout,
        bytes_out_len_loc_empty_n,
        bytes_out_len_loc_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] bytes_out_V_TDATA;
output   bytes_out_V_TVALID;
input   bytes_out_V_TREADY;
input  [31:0] words_in_V_dout;
input   words_in_V_empty_n;
output   words_in_V_read;
input  [13:0] bytes_out_len_loc_dout;
input   bytes_out_len_loc_empty_n;
output   bytes_out_len_loc_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg words_in_V_read;
reg bytes_out_len_loc_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] bytes_out_V_1_data_out;
reg    bytes_out_V_1_vld_in;
wire    bytes_out_V_1_vld_out;
wire    bytes_out_V_1_ack_in;
wire    bytes_out_V_1_ack_out;
reg   [7:0] bytes_out_V_1_payload_A;
reg   [7:0] bytes_out_V_1_payload_B;
reg    bytes_out_V_1_sel_rd;
reg    bytes_out_V_1_sel_wr;
wire    bytes_out_V_1_sel;
wire    bytes_out_V_1_load_A;
wire    bytes_out_V_1_load_B;
reg   [1:0] bytes_out_V_1_state;
wire    bytes_out_V_1_state_cmp_full;
reg    bytes_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_i_i_fu_144_p2;
wire    ap_CS_fsm_state3;
reg    words_in_V_blk_n;
wire   [0:0] tmp_2_i_i_fu_155_p2;
reg    bytes_out_len_loc_blk_n;
wire   [16:0] tmp_cast_i_i_fu_124_p1;
reg   [16:0] tmp_cast_i_i_reg_187;
reg    ap_block_state1;
wire   [15:0] i_fu_149_p2;
reg   [15:0] i_reg_195;
reg    ap_predicate_op25_read_state2;
reg    ap_block_state2;
reg    ap_block_state2_io;
wire   [7:0] tmpbyte_fu_161_p1;
reg   [15:0] i_i_i_reg_103;
reg   [31:0] ap_phi_mux_p_0_1_i_i_phi_fu_117_p4;
wire   [31:0] p_0_cast_i_i_fu_131_p1;
reg   [23:0] p_0_i_i_fu_80;
wire   [16:0] i_cast_i_i_fu_140_p1;
wire   [1:0] tmp_fu_136_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 bytes_out_V_1_sel_rd = 1'b0;
#0 bytes_out_V_1_sel_wr = 1'b0;
#0 bytes_out_V_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((bytes_out_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op25_read_state2 == 1'b1))) & (exitcond_i_i_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        bytes_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((bytes_out_V_1_ack_out == 1'b1) & (bytes_out_V_1_vld_out == 1'b1))) begin
            bytes_out_V_1_sel_rd <= ~bytes_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        bytes_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((bytes_out_V_1_ack_in == 1'b1) & (bytes_out_V_1_vld_in == 1'b1))) begin
            bytes_out_V_1_sel_wr <= ~bytes_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        bytes_out_V_1_state <= 2'd0;
    end else begin
        if ((((bytes_out_V_1_state == 2'd2) & (bytes_out_V_1_vld_in == 1'b0)) | ((bytes_out_V_1_state == 2'd3) & (bytes_out_V_1_vld_in == 1'b0) & (bytes_out_V_1_ack_out == 1'b1)))) begin
            bytes_out_V_1_state <= 2'd2;
        end else if ((((bytes_out_V_1_state == 2'd1) & (bytes_out_V_1_ack_out == 1'b0)) | ((bytes_out_V_1_state == 2'd3) & (bytes_out_V_1_ack_out == 1'b0) & (bytes_out_V_1_vld_in == 1'b1)))) begin
            bytes_out_V_1_state <= 2'd1;
        end else if (((~((bytes_out_V_1_vld_in == 1'b0) & (bytes_out_V_1_ack_out == 1'b1)) & ~((bytes_out_V_1_ack_out == 1'b0) & (bytes_out_V_1_vld_in == 1'b1)) & (bytes_out_V_1_state == 2'd3)) | ((bytes_out_V_1_state == 2'd1) & (bytes_out_V_1_ack_out == 1'b1)) | ((bytes_out_V_1_state == 2'd2) & (bytes_out_V_1_vld_in == 1'b1)))) begin
            bytes_out_V_1_state <= 2'd3;
        end else begin
            bytes_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((bytes_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_i_i_reg_103 <= i_reg_195;
    end else if ((~((bytes_out_len_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_i_reg_103 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((bytes_out_V_1_load_A == 1'b1)) begin
        bytes_out_V_1_payload_A <= tmpbyte_fu_161_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((bytes_out_V_1_load_B == 1'b1)) begin
        bytes_out_V_1_payload_B <= tmpbyte_fu_161_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((bytes_out_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op25_read_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_195 <= i_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((bytes_out_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op25_read_state2 == 1'b1))) & (exitcond_i_i_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0_i_i_fu_80 <= {{ap_phi_mux_p_0_1_i_i_phi_fu_117_p4[31:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((bytes_out_len_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_cast_i_i_reg_187[13 : 0] <= tmp_cast_i_i_fu_124_p1[13 : 0];
    end
end

always @ (*) begin
    if ((~((bytes_out_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op25_read_state2 == 1'b1))) & (exitcond_i_i_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((tmp_2_i_i_fu_155_p2 == 1'd0)) begin
            ap_phi_mux_p_0_1_i_i_phi_fu_117_p4 = p_0_cast_i_i_fu_131_p1;
        end else if ((tmp_2_i_i_fu_155_p2 == 1'd1)) begin
            ap_phi_mux_p_0_1_i_i_phi_fu_117_p4 = words_in_V_dout;
        end else begin
            ap_phi_mux_p_0_1_i_i_phi_fu_117_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_0_1_i_i_phi_fu_117_p4 = 'bx;
    end
end

always @ (*) begin
    if ((~((bytes_out_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op25_read_state2 == 1'b1))) & (exitcond_i_i_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((bytes_out_V_1_sel == 1'b1)) begin
        bytes_out_V_1_data_out = bytes_out_V_1_payload_B;
    end else begin
        bytes_out_V_1_data_out = bytes_out_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((bytes_out_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op25_read_state2 == 1'b1))) & (exitcond_i_i_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bytes_out_V_1_vld_in = 1'b1;
    end else begin
        bytes_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((exitcond_i_i_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        bytes_out_V_TDATA_blk_n = bytes_out_V_1_state[1'd1];
    end else begin
        bytes_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bytes_out_len_loc_blk_n = bytes_out_len_loc_empty_n;
    end else begin
        bytes_out_len_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((bytes_out_len_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bytes_out_len_loc_read = 1'b1;
    end else begin
        bytes_out_len_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_i_i_fu_155_p2 == 1'd1) & (exitcond_i_i_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        words_in_V_blk_n = words_in_V_empty_n;
    end else begin
        words_in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((bytes_out_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op25_read_state2 == 1'b1))) & (ap_predicate_op25_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        words_in_V_read = 1'b1;
    end else begin
        words_in_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((bytes_out_len_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((bytes_out_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op25_read_state2 == 1'b1))) & (exitcond_i_i_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((bytes_out_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op25_read_state2 == 1'b1))) & (exitcond_i_i_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((bytes_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((bytes_out_len_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((bytes_out_V_1_ack_in == 1'b0) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op25_read_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = ((exitcond_i_i_fu_144_p2 == 1'd0) & (bytes_out_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_predicate_op25_read_state2 = ((tmp_2_i_i_fu_155_p2 == 1'd1) & (exitcond_i_i_fu_144_p2 == 1'd0));
end

assign bytes_out_V_1_ack_in = bytes_out_V_1_state[1'd1];

assign bytes_out_V_1_ack_out = bytes_out_V_TREADY;

assign bytes_out_V_1_load_A = (~bytes_out_V_1_sel_wr & bytes_out_V_1_state_cmp_full);

assign bytes_out_V_1_load_B = (bytes_out_V_1_state_cmp_full & bytes_out_V_1_sel_wr);

assign bytes_out_V_1_sel = bytes_out_V_1_sel_rd;

assign bytes_out_V_1_state_cmp_full = ((bytes_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign bytes_out_V_1_vld_out = bytes_out_V_1_state[1'd0];

assign bytes_out_V_TDATA = bytes_out_V_1_data_out;

assign bytes_out_V_TVALID = bytes_out_V_1_state[1'd0];

assign exitcond_i_i_fu_144_p2 = ((i_cast_i_i_fu_140_p1 == tmp_cast_i_i_reg_187) ? 1'b1 : 1'b0);

assign i_cast_i_i_fu_140_p1 = i_i_i_reg_103;

assign i_fu_149_p2 = (16'd1 + i_i_i_reg_103);

assign p_0_cast_i_i_fu_131_p1 = p_0_i_i_fu_80;

assign tmp_2_i_i_fu_155_p2 = ((tmp_fu_136_p1 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_cast_i_i_fu_124_p1 = bytes_out_len_loc_dout;

assign tmp_fu_136_p1 = i_i_i_reg_103[1:0];

assign tmpbyte_fu_161_p1 = ap_phi_mux_p_0_1_i_i_phi_fu_117_p4[7:0];

always @ (posedge ap_clk) begin
    tmp_cast_i_i_reg_187[16:14] <= 3'b000;
end

endmodule //strm_words2bytes
