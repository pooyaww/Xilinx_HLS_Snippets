// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sum_io (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sum_i,
        sum_i_ap_vld,
        sum_i_ap_ack,
        sum_o,
        sum_o_ap_vld,
        sum_o_ap_ack,
        sum_i_blk_n,
        sum_o_blk_n
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] sum_i;
input   sum_i_ap_vld;
output   sum_i_ap_ack;
output  [31:0] sum_o;
output   sum_o_ap_vld;
input   sum_o_ap_ack;
output   sum_i_blk_n;
output   sum_o_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sum_i_ap_ack;
reg sum_o_ap_vld;
reg sum_i_blk_n;
reg sum_o_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (sum_o_ap_ack == 1'b0) | (sum_i_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (sum_o_ap_ack == 1'b0) | (sum_i_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (sum_o_ap_ack == 1'b0) | (sum_i_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_i_ap_ack = 1'b1;
    end else begin
        sum_i_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_i_blk_n = sum_i_ap_vld;
    end else begin
        sum_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (sum_o_ap_ack == 1'b0) | (sum_i_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_o_ap_vld = 1'b1;
    end else begin
        sum_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_o_blk_n = sum_o_ap_ack;
    end else begin
        sum_o_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (sum_i_ap_vld == 1'b0));
end

assign sum_o = (sum_i + 32'd30);

endmodule //sum_io
