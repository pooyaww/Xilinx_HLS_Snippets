-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sum_io_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of sum_io_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sum_io_top,hls_ip_2018_3_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.552000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=35,HLS_SYN_LUT=83,HLS_VERSION=2018_3_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal StgValue_6_sum_io_fu_14_ap_start : STD_LOGIC;
    signal StgValue_6_sum_io_fu_14_ap_done : STD_LOGIC;
    signal StgValue_6_sum_io_fu_14_ap_idle : STD_LOGIC;
    signal StgValue_6_sum_io_fu_14_ap_ready : STD_LOGIC;
    signal StgValue_6_sum_io_fu_14_sum_i_ap_ack : STD_LOGIC;
    signal StgValue_6_sum_io_fu_14_sum_o : STD_LOGIC_VECTOR (31 downto 0);
    signal StgValue_6_sum_io_fu_14_sum_o_ap_vld : STD_LOGIC;
    signal StgValue_6_sum_io_fu_14_sum_i_blk_n : STD_LOGIC;
    signal StgValue_6_sum_io_fu_14_sum_o_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sum_fu_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component sum_io IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sum_i : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_i_ap_vld : IN STD_LOGIC;
        sum_i_ap_ack : OUT STD_LOGIC;
        sum_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_o_ap_vld : OUT STD_LOGIC;
        sum_o_ap_ack : IN STD_LOGIC;
        sum_i_blk_n : OUT STD_LOGIC;
        sum_o_blk_n : OUT STD_LOGIC );
    end component;



begin
    StgValue_6_sum_io_fu_14 : component sum_io
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => StgValue_6_sum_io_fu_14_ap_start,
        ap_done => StgValue_6_sum_io_fu_14_ap_done,
        ap_idle => StgValue_6_sum_io_fu_14_ap_idle,
        ap_ready => StgValue_6_sum_io_fu_14_ap_ready,
        sum_i => sum_fu_10,
        sum_i_ap_vld => ap_const_logic_1,
        sum_i_ap_ack => StgValue_6_sum_io_fu_14_sum_i_ap_ack,
        sum_o => StgValue_6_sum_io_fu_14_sum_o,
        sum_o_ap_vld => StgValue_6_sum_io_fu_14_sum_o_ap_vld,
        sum_o_ap_ack => ap_const_logic_1,
        sum_i_blk_n => StgValue_6_sum_io_fu_14_sum_i_blk_n,
        sum_o_blk_n => StgValue_6_sum_io_fu_14_sum_o_blk_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    sum_fu_10_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_fu_10 <= ap_const_lv32_1E;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = StgValue_6_sum_io_fu_14_sum_o_ap_vld))) then 
                sum_fu_10 <= StgValue_6_sum_io_fu_14_sum_o;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    StgValue_6_sum_io_fu_14_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            StgValue_6_sum_io_fu_14_ap_start <= ap_const_logic_1;
        else 
            StgValue_6_sum_io_fu_14_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

end behav;
