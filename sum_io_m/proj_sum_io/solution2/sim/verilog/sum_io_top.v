// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sum_io_top,hls_ip_2018_3_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.552000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=35,HLS_SYN_LUT=83,HLS_VERSION=2018_3_1}" *)

module sum_io_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    StgValue_6_sum_io_fu_14_ap_start;
wire    StgValue_6_sum_io_fu_14_ap_done;
wire    StgValue_6_sum_io_fu_14_ap_idle;
wire    StgValue_6_sum_io_fu_14_ap_ready;
wire    StgValue_6_sum_io_fu_14_sum_i_ap_ack;
wire   [31:0] StgValue_6_sum_io_fu_14_sum_o;
wire    StgValue_6_sum_io_fu_14_sum_o_ap_vld;
wire    StgValue_6_sum_io_fu_14_sum_i_blk_n;
wire    StgValue_6_sum_io_fu_14_sum_o_blk_n;
wire    ap_CS_fsm_state2;
reg   [31:0] sum_fu_10;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

sum_io StgValue_6_sum_io_fu_14(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(StgValue_6_sum_io_fu_14_ap_start),
    .ap_done(StgValue_6_sum_io_fu_14_ap_done),
    .ap_idle(StgValue_6_sum_io_fu_14_ap_idle),
    .ap_ready(StgValue_6_sum_io_fu_14_ap_ready),
    .sum_i(sum_fu_10),
    .sum_i_ap_vld(1'b1),
    .sum_i_ap_ack(StgValue_6_sum_io_fu_14_sum_i_ap_ack),
    .sum_o(StgValue_6_sum_io_fu_14_sum_o),
    .sum_o_ap_vld(StgValue_6_sum_io_fu_14_sum_o_ap_vld),
    .sum_o_ap_ack(1'b1),
    .sum_i_blk_n(StgValue_6_sum_io_fu_14_sum_i_blk_n),
    .sum_o_blk_n(StgValue_6_sum_io_fu_14_sum_o_blk_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_fu_10 <= 32'd30;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == StgValue_6_sum_io_fu_14_sum_o_ap_vld))) begin
        sum_fu_10 <= StgValue_6_sum_io_fu_14_sum_o;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        StgValue_6_sum_io_fu_14_ap_start = 1'b1;
    end else begin
        StgValue_6_sum_io_fu_14_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

endmodule //sum_io_top
