// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sum_io,hls_ip_2018_3_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.552000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=134,HLS_SYN_LUT=164,HLS_VERSION=2018_3_1}" *)

module sum_io (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1,
        in1_ap_vld,
        in1_ap_ack,
        in2,
        in2_ap_vld,
        sum_i,
        sum_i_ap_vld,
        sum_i_ap_ack,
        sum_o,
        sum_o_ap_vld,
        sum_o_ap_ack,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in1;
input   in1_ap_vld;
output   in1_ap_ack;
input  [31:0] in2;
input   in2_ap_vld;
input  [31:0] sum_i;
input   sum_i_ap_vld;
output   sum_i_ap_ack;
output  [31:0] sum_o;
output   sum_o_ap_vld;
input   sum_o_ap_ack;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in1_ap_ack;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] in2_preg;
reg   [31:0] in2_in_sig;
reg    in2_ap_vld_preg;
reg    in2_ap_vld_in_sig;
reg   [31:0] sum_0_data_reg;
reg    sum_0_vld_reg;
wire    sum_0_vld_in;
wire    sum_0_vld_out;
reg    sum_0_ack_in;
reg    sum_0_ack_out;
reg   [31:0] sum_1_data_reg;
reg    sum_1_vld_reg;
reg    sum_1_vld_in;
reg    sum_1_ack_in;
wire    sum_1_ack_out;
reg    in1_blk_n;
reg    in2_blk_n;
reg    sum_i_blk_n;
wire    ap_CS_fsm_state2;
reg    sum_o_blk_n;
wire    ap_CS_fsm_state3;
wire   [31:0] temp_fu_55_p2;
reg   [31:0] temp_reg_67;
reg    ap_block_state1;
wire   [31:0] tmp_1_fu_61_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 in2_preg = 32'd0;
#0 in2_ap_vld_preg = 1'b0;
#0 sum_0_data_reg = 32'd0;
#0 sum_0_vld_reg = 1'b0;
#0 sum_1_data_reg = 32'd0;
#0 sum_1_vld_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in2_ap_vld_preg <= 1'b0;
    end else begin
        if (((sum_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            in2_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (in2_ap_vld == 1'b1))) begin
            in2_ap_vld_preg <= in2_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in2_preg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (in2_ap_vld == 1'b1))) begin
            in2_preg <= in2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (sum_0_vld_reg == 1'b0) & (sum_0_vld_in == 1'b1))) begin
        sum_0_vld_reg <= 1'b1;
    end else if (((sum_0_vld_in == 1'b0) & (sum_0_ack_out == 1'b1) & (sum_0_vld_reg == 1'b1))) begin
        sum_0_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (sum_1_vld_reg == 1'b0) & (sum_1_vld_in == 1'b1))) begin
        sum_1_vld_reg <= 1'b1;
    end else if (((sum_1_vld_in == 1'b0) & (sum_1_ack_out == 1'b1) & (sum_1_vld_reg == 1'b1))) begin
        sum_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (sum_0_vld_reg == 1'b0) & (sum_0_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (sum_0_ack_out == 1'b1) & (sum_0_vld_in == 1'b1) & (sum_0_vld_reg == 1'b1)))) begin
        sum_0_data_reg <= sum_i;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (sum_1_vld_reg == 1'b0) & (sum_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (sum_1_ack_out == 1'b1) & (sum_1_vld_in == 1'b1) & (sum_1_vld_reg == 1'b1)))) begin
        sum_1_data_reg <= tmp_1_fu_61_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (in2_ap_vld_in_sig == 1'b0) | (in1_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        temp_reg_67 <= temp_fu_55_p2;
    end
end

always @ (*) begin
    if (((sum_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((sum_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in2_ap_vld_in_sig == 1'b0) | (in1_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in1_ap_ack = 1'b1;
    end else begin
        in1_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in1_blk_n = in1_ap_vld;
    end else begin
        in1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((in2_ap_vld == 1'b1)) begin
        in2_ap_vld_in_sig = in2_ap_vld;
    end else begin
        in2_ap_vld_in_sig = in2_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in2_blk_n = in2_ap_vld;
    end else begin
        in2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((in2_ap_vld == 1'b1)) begin
        in2_in_sig = in2;
    end else begin
        in2_in_sig = in2_preg;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (sum_0_vld_reg == 1'b0) & (sum_0_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (sum_0_ack_out == 1'b1) & (sum_0_vld_in == 1'b1) & (sum_0_vld_reg == 1'b1)))) begin
        sum_0_ack_in = 1'b1;
    end else begin
        sum_0_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((sum_1_ack_in == 1'b0) | (sum_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_0_ack_out = 1'b1;
    end else begin
        sum_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((sum_1_vld_reg == 1'b0) | ((sum_1_ack_out == 1'b1) & (sum_1_vld_reg == 1'b1)))) begin
        sum_1_ack_in = 1'b1;
    end else begin
        sum_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((sum_1_ack_in == 1'b0) | (sum_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_1_vld_in = 1'b1;
    end else begin
        sum_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_i_blk_n = sum_0_vld_reg;
    end else begin
        sum_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        sum_o_blk_n = sum_1_ack_in;
    end else begin
        sum_o_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (in2_ap_vld_in_sig == 1'b0) | (in1_ap_vld == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((sum_1_ack_in == 1'b0) | (sum_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((sum_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (in2_ap_vld_in_sig == 1'b0) | (in1_ap_vld == 1'b0));
end

assign ap_return = temp_reg_67;

assign sum_0_vld_in = sum_i_ap_vld;

assign sum_0_vld_out = sum_0_vld_reg;

assign sum_1_ack_out = sum_o_ap_ack;

assign sum_i_ap_ack = sum_0_ack_in;

assign sum_o = sum_1_data_reg;

assign sum_o_ap_vld = sum_1_vld_reg;

assign temp_fu_55_p2 = (in2_in_sig + in1);

assign tmp_1_fu_61_p2 = (sum_0_data_reg + temp_reg_67);

endmodule //sum_io
