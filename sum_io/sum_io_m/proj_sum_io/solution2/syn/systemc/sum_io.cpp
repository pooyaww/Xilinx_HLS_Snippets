// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sum_io.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sum_io::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sum_io::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> sum_io::ap_ST_fsm_state1 = "1";
const sc_lv<3> sum_io::ap_ST_fsm_state2 = "10";
const sc_lv<3> sum_io::ap_ST_fsm_state3 = "100";
const sc_lv<32> sum_io::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sum_io::ap_const_lv32_1 = "1";
const sc_lv<32> sum_io::ap_const_lv32_2 = "10";
const bool sum_io::ap_const_boolean_1 = true;

sum_io::sum_io(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( in1_ap_vld );
    sensitive << ( in2_ap_vld_in_sig );

    SC_METHOD(thread_ap_done);
    sensitive << ( sum_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( sum_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_return);
    sensitive << ( sum_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( temp_reg_67 );

    SC_METHOD(thread_in1_ap_ack);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in1_ap_vld );
    sensitive << ( in2_ap_vld_in_sig );

    SC_METHOD(thread_in1_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in1_ap_vld );

    SC_METHOD(thread_in2_ap_vld_in_sig);
    sensitive << ( in2_ap_vld );
    sensitive << ( in2_ap_vld_preg );

    SC_METHOD(thread_in2_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in2_ap_vld );

    SC_METHOD(thread_in2_in_sig);
    sensitive << ( in2 );
    sensitive << ( in2_preg );
    sensitive << ( in2_ap_vld );

    SC_METHOD(thread_sum_0_ack_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sum_0_vld_reg );
    sensitive << ( sum_0_vld_in );
    sensitive << ( sum_0_ack_out );

    SC_METHOD(thread_sum_0_ack_out);
    sensitive << ( sum_0_vld_out );
    sensitive << ( sum_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sum_0_vld_in);
    sensitive << ( sum_i_ap_vld );

    SC_METHOD(thread_sum_0_vld_out);
    sensitive << ( sum_0_vld_reg );

    SC_METHOD(thread_sum_1_ack_in);
    sensitive << ( sum_1_vld_reg );
    sensitive << ( sum_1_ack_out );

    SC_METHOD(thread_sum_1_ack_out);
    sensitive << ( sum_o_ap_ack );

    SC_METHOD(thread_sum_1_vld_in);
    sensitive << ( sum_0_vld_out );
    sensitive << ( sum_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sum_i_ap_ack);
    sensitive << ( sum_0_ack_in );

    SC_METHOD(thread_sum_i_blk_n);
    sensitive << ( sum_0_vld_reg );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sum_o);
    sensitive << ( sum_1_data_reg );

    SC_METHOD(thread_sum_o_ap_vld);
    sensitive << ( sum_1_vld_reg );

    SC_METHOD(thread_sum_o_blk_n);
    sensitive << ( sum_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_temp_fu_55_p2);
    sensitive << ( in1 );
    sensitive << ( in2_in_sig );

    SC_METHOD(thread_tmp_1_fu_61_p2);
    sensitive << ( sum_0_data_reg );
    sensitive << ( temp_reg_67 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in1_ap_vld );
    sensitive << ( in2_ap_vld_in_sig );
    sensitive << ( sum_0_vld_out );
    sensitive << ( sum_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    in2_preg = "00000000000000000000000000000000";
    in2_ap_vld_preg = SC_LOGIC_0;
    sum_0_data_reg = "00000000000000000000000000000000";
    sum_0_vld_reg = SC_LOGIC_0;
    sum_1_data_reg = "00000000000000000000000000000000";
    sum_1_vld_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sum_io_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in1, "(port)in1");
    sc_trace(mVcdFile, in1_ap_vld, "(port)in1_ap_vld");
    sc_trace(mVcdFile, in1_ap_ack, "(port)in1_ap_ack");
    sc_trace(mVcdFile, in2, "(port)in2");
    sc_trace(mVcdFile, in2_ap_vld, "(port)in2_ap_vld");
    sc_trace(mVcdFile, sum_i, "(port)sum_i");
    sc_trace(mVcdFile, sum_i_ap_vld, "(port)sum_i_ap_vld");
    sc_trace(mVcdFile, sum_i_ap_ack, "(port)sum_i_ap_ack");
    sc_trace(mVcdFile, sum_o, "(port)sum_o");
    sc_trace(mVcdFile, sum_o_ap_vld, "(port)sum_o_ap_vld");
    sc_trace(mVcdFile, sum_o_ap_ack, "(port)sum_o_ap_ack");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in2_preg, "in2_preg");
    sc_trace(mVcdFile, in2_in_sig, "in2_in_sig");
    sc_trace(mVcdFile, in2_ap_vld_preg, "in2_ap_vld_preg");
    sc_trace(mVcdFile, in2_ap_vld_in_sig, "in2_ap_vld_in_sig");
    sc_trace(mVcdFile, sum_0_data_reg, "sum_0_data_reg");
    sc_trace(mVcdFile, sum_0_vld_reg, "sum_0_vld_reg");
    sc_trace(mVcdFile, sum_0_vld_in, "sum_0_vld_in");
    sc_trace(mVcdFile, sum_0_vld_out, "sum_0_vld_out");
    sc_trace(mVcdFile, sum_0_ack_in, "sum_0_ack_in");
    sc_trace(mVcdFile, sum_0_ack_out, "sum_0_ack_out");
    sc_trace(mVcdFile, sum_1_data_reg, "sum_1_data_reg");
    sc_trace(mVcdFile, sum_1_vld_reg, "sum_1_vld_reg");
    sc_trace(mVcdFile, sum_1_vld_in, "sum_1_vld_in");
    sc_trace(mVcdFile, sum_1_ack_in, "sum_1_ack_in");
    sc_trace(mVcdFile, sum_1_ack_out, "sum_1_ack_out");
    sc_trace(mVcdFile, in1_blk_n, "in1_blk_n");
    sc_trace(mVcdFile, in2_blk_n, "in2_blk_n");
    sc_trace(mVcdFile, sum_i_blk_n, "sum_i_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, sum_o_blk_n, "sum_o_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, temp_fu_55_p2, "temp_fu_55_p2");
    sc_trace(mVcdFile, temp_reg_67, "temp_reg_67");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_1_fu_61_p2, "tmp_1_fu_61_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sum_io.hdltvin.dat");
    mHdltvoutHandle.open("sum_io.hdltvout.dat");
}

sum_io::~sum_io() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void sum_io::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in2_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             esl_seteq<1,1,1>(sum_1_ack_in.read(), ap_const_logic_1))) {
            in2_ap_vld_preg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, in2_ap_vld.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())))) {
            in2_ap_vld_preg = in2_ap_vld.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in2_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in2_ap_vld.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())))) {
            in2_preg = in2.read();
        }
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, sum_0_vld_in.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, sum_0_vld_reg.read()))) {
        sum_0_vld_reg = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, sum_0_vld_in.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, sum_0_vld_reg.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, sum_0_ack_out.read()))) {
        sum_0_vld_reg = ap_const_logic_0;
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, sum_1_vld_in.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, sum_1_vld_reg.read()))) {
        sum_1_vld_reg = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, sum_1_vld_in.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, sum_1_vld_reg.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, sum_1_ack_out.read()))) {
        sum_1_vld_reg = ap_const_logic_0;
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, sum_0_vld_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, sum_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, sum_0_vld_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, sum_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, sum_0_ack_out.read())))) {
        sum_0_data_reg = sum_i.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, sum_1_vld_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, sum_1_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, sum_1_vld_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, sum_1_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, sum_1_ack_out.read())))) {
        sum_1_data_reg = tmp_1_fu_61_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in2_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in1_ap_vld.read())))) {
        temp_reg_67 = temp_fu_55_p2.read();
    }
}

void sum_io::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sum_io::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sum_io::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sum_io::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in2_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in1_ap_vld.read()));
}

void sum_io::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(sum_1_ack_in.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sum_io::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sum_io::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(sum_1_ack_in.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sum_io::thread_ap_return() {
    ap_return = temp_reg_67.read();
}

void sum_io::thread_in1_ap_ack() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in2_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in1_ap_vld.read())))) {
        in1_ap_ack = ap_const_logic_1;
    } else {
        in1_ap_ack = ap_const_logic_0;
    }
}

void sum_io::thread_in1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        in1_blk_n = in1_ap_vld.read();
    } else {
        in1_blk_n = ap_const_logic_1;
    }
}

void sum_io::thread_in2_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in2_ap_vld.read())) {
        in2_ap_vld_in_sig = in2_ap_vld.read();
    } else {
        in2_ap_vld_in_sig = in2_ap_vld_preg.read();
    }
}

void sum_io::thread_in2_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        in2_blk_n = in2_ap_vld.read();
    } else {
        in2_blk_n = ap_const_logic_1;
    }
}

void sum_io::thread_in2_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in2_ap_vld.read())) {
        in2_in_sig = in2.read();
    } else {
        in2_in_sig = in2_preg.read();
    }
}

void sum_io::thread_sum_0_ack_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, sum_0_vld_in.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, sum_0_vld_reg.read())) || 
         (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, sum_0_vld_in.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, sum_0_vld_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, sum_0_ack_out.read())))) {
        sum_0_ack_in = ap_const_logic_1;
    } else {
        sum_0_ack_in = ap_const_logic_0;
    }
}

void sum_io::thread_sum_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, sum_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sum_1_ack_in.read())))) {
        sum_0_ack_out = ap_const_logic_1;
    } else {
        sum_0_ack_out = ap_const_logic_0;
    }
}

void sum_io::thread_sum_0_vld_in() {
    sum_0_vld_in = sum_i_ap_vld.read();
}

void sum_io::thread_sum_0_vld_out() {
    sum_0_vld_out = sum_0_vld_reg.read();
}

void sum_io::thread_sum_1_ack_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, sum_1_vld_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, sum_1_vld_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, sum_1_ack_out.read())))) {
        sum_1_ack_in = ap_const_logic_1;
    } else {
        sum_1_ack_in = ap_const_logic_0;
    }
}

void sum_io::thread_sum_1_ack_out() {
    sum_1_ack_out = sum_o_ap_ack.read();
}

void sum_io::thread_sum_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, sum_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sum_1_ack_in.read())))) {
        sum_1_vld_in = ap_const_logic_1;
    } else {
        sum_1_vld_in = ap_const_logic_0;
    }
}

void sum_io::thread_sum_i_ap_ack() {
    sum_i_ap_ack = sum_0_ack_in.read();
}

void sum_io::thread_sum_i_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sum_i_blk_n = sum_0_vld_reg.read();
    } else {
        sum_i_blk_n = ap_const_logic_1;
    }
}

void sum_io::thread_sum_o() {
    sum_o = sum_1_data_reg.read();
}

void sum_io::thread_sum_o_ap_vld() {
    sum_o_ap_vld = sum_1_vld_reg.read();
}

void sum_io::thread_sum_o_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        sum_o_blk_n = sum_1_ack_in.read();
    } else {
        sum_o_blk_n = ap_const_logic_1;
    }
}

void sum_io::thread_temp_fu_55_p2() {
    temp_fu_55_p2 = (!in2_in_sig.read().is_01() || !in1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(in2_in_sig.read()) + sc_biguint<32>(in1.read()));
}

void sum_io::thread_tmp_1_fu_61_p2() {
    tmp_1_fu_61_p2 = (!sum_0_data_reg.read().is_01() || !temp_reg_67.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum_0_data_reg.read()) + sc_biguint<32>(temp_reg_67.read()));
}

void sum_io::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in2_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in1_ap_vld.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, sum_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, sum_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(sum_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void sum_io::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1\" :  \"" << in1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1_ap_vld\" :  \"" << in1_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in1_ap_ack\" :  \"" << in1_ap_ack.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2\" :  \"" << in2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2_ap_vld\" :  \"" << in2_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sum_i\" :  \"" << sum_i.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sum_i_ap_vld\" :  \"" << sum_i_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sum_i_ap_ack\" :  \"" << sum_i_ap_ack.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sum_o\" :  \"" << sum_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sum_o_ap_vld\" :  \"" << sum_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sum_o_ap_ack\" :  \"" << sum_o_ap_ack.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

