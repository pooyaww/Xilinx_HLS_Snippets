// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sum_io_HH_
#define _sum_io_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct sum_io : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > in1;
    sc_in< sc_logic > in1_ap_vld;
    sc_out< sc_logic > in1_ap_ack;
    sc_in< sc_lv<32> > in2;
    sc_in< sc_logic > in2_ap_vld;
    sc_in< sc_lv<32> > sum_i;
    sc_in< sc_logic > sum_i_ap_vld;
    sc_out< sc_logic > sum_i_ap_ack;
    sc_out< sc_lv<32> > sum_o;
    sc_out< sc_logic > sum_o_ap_vld;
    sc_in< sc_logic > sum_o_ap_ack;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    sum_io(sc_module_name name);
    SC_HAS_PROCESS(sum_io);

    ~sum_io();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > in2_preg;
    sc_signal< sc_lv<32> > in2_in_sig;
    sc_signal< sc_logic > in2_ap_vld_preg;
    sc_signal< sc_logic > in2_ap_vld_in_sig;
    sc_signal< sc_lv<32> > sum_0_data_reg;
    sc_signal< sc_logic > sum_0_vld_reg;
    sc_signal< sc_logic > sum_0_vld_in;
    sc_signal< sc_logic > sum_0_vld_out;
    sc_signal< sc_logic > sum_0_ack_in;
    sc_signal< sc_logic > sum_0_ack_out;
    sc_signal< sc_lv<32> > sum_1_data_reg;
    sc_signal< sc_logic > sum_1_vld_reg;
    sc_signal< sc_logic > sum_1_vld_in;
    sc_signal< sc_logic > sum_1_ack_in;
    sc_signal< sc_logic > sum_1_ack_out;
    sc_signal< sc_logic > in1_blk_n;
    sc_signal< sc_logic > in2_blk_n;
    sc_signal< sc_logic > sum_i_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > sum_o_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > temp_fu_55_p2;
    sc_signal< sc_lv<32> > temp_reg_67;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > tmp_1_fu_61_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_in1_ap_ack();
    void thread_in1_blk_n();
    void thread_in2_ap_vld_in_sig();
    void thread_in2_blk_n();
    void thread_in2_in_sig();
    void thread_sum_0_ack_in();
    void thread_sum_0_ack_out();
    void thread_sum_0_vld_in();
    void thread_sum_0_vld_out();
    void thread_sum_1_ack_in();
    void thread_sum_1_ack_out();
    void thread_sum_1_vld_in();
    void thread_sum_i_ap_ack();
    void thread_sum_i_blk_n();
    void thread_sum_o();
    void thread_sum_o_ap_vld();
    void thread_sum_o_blk_n();
    void thread_temp_fu_55_p2();
    void thread_tmp_1_fu_61_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
