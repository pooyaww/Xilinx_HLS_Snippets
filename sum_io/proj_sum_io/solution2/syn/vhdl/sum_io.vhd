-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sum_io is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in1_ap_vld : IN STD_LOGIC;
    in1_ap_ack : OUT STD_LOGIC;
    in2 : IN STD_LOGIC_VECTOR (31 downto 0);
    in2_ap_vld : IN STD_LOGIC;
    sum_i : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_i_ap_vld : IN STD_LOGIC;
    sum_i_ap_ack : OUT STD_LOGIC;
    sum_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_o_ap_vld : OUT STD_LOGIC;
    sum_o_ap_ack : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sum_io is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sum_io,hls_ip_2018_3_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.552000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=134,HLS_SYN_LUT=164,HLS_VERSION=2018_3_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in2_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_ap_vld_preg : STD_LOGIC := '0';
    signal in2_ap_vld_in_sig : STD_LOGIC;
    signal sum_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sum_0_vld_reg : STD_LOGIC := '0';
    signal sum_0_vld_in : STD_LOGIC;
    signal sum_0_vld_out : STD_LOGIC;
    signal sum_0_ack_in : STD_LOGIC;
    signal sum_0_ack_out : STD_LOGIC;
    signal sum_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sum_1_vld_reg : STD_LOGIC := '0';
    signal sum_1_vld_in : STD_LOGIC;
    signal sum_1_ack_in : STD_LOGIC;
    signal sum_1_ack_out : STD_LOGIC;
    signal in1_blk_n : STD_LOGIC;
    signal in2_blk_n : STD_LOGIC;
    signal sum_i_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sum_o_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal temp_fu_55_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_reg_67 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_1_fu_61_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in2_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in2_ap_vld_preg <= ap_const_logic_0;
            else
                if (((sum_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    in2_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (in2_ap_vld = ap_const_logic_1))) then 
                    in2_ap_vld_preg <= in2_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    in2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in2_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (in2_ap_vld = ap_const_logic_1))) then 
                    in2_preg <= in2;
                end if; 
            end if;
        end if;
    end process;


    sum_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (sum_0_vld_reg = ap_const_logic_0) and (sum_0_vld_in = ap_const_logic_1))) then 
                sum_0_vld_reg <= ap_const_logic_1;
            elsif (((sum_0_vld_in = ap_const_logic_0) and (sum_0_ack_out = ap_const_logic_1) and (sum_0_vld_reg = ap_const_logic_1))) then 
                sum_0_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    sum_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (sum_1_vld_reg = ap_const_logic_0) and (sum_1_vld_in = ap_const_logic_1))) then 
                sum_1_vld_reg <= ap_const_logic_1;
            elsif (((sum_1_vld_in = ap_const_logic_0) and (sum_1_ack_out = ap_const_logic_1) and (sum_1_vld_reg = ap_const_logic_1))) then 
                sum_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (sum_0_vld_reg = ap_const_logic_0) and (sum_0_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (sum_0_ack_out = ap_const_logic_1) and (sum_0_vld_in = ap_const_logic_1) and (sum_0_vld_reg = ap_const_logic_1)))) then
                sum_0_data_reg <= sum_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (sum_1_vld_reg = ap_const_logic_0) and (sum_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (sum_1_ack_out = ap_const_logic_1) and (sum_1_vld_in = ap_const_logic_1) and (sum_1_vld_reg = ap_const_logic_1)))) then
                sum_1_data_reg <= tmp_1_fu_61_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (in2_ap_vld_in_sig = ap_const_logic_0) or (in1_ap_vld = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                temp_reg_67 <= temp_fu_55_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in1_ap_vld, in2_ap_vld_in_sig, sum_0_vld_out, sum_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (in2_ap_vld_in_sig = ap_const_logic_0) or (in1_ap_vld = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((sum_1_ack_in = ap_const_logic_0) or (sum_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((sum_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, in1_ap_vld, in2_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (in2_ap_vld_in_sig = ap_const_logic_0) or (in1_ap_vld = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(sum_1_ack_in, ap_CS_fsm_state3)
    begin
        if (((sum_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(sum_1_ack_in, ap_CS_fsm_state3)
    begin
        if (((sum_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= temp_reg_67;

    in1_ap_ack_assign_proc : process(ap_start, ap_CS_fsm_state1, in1_ap_vld, in2_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (in2_ap_vld_in_sig = ap_const_logic_0) or (in1_ap_vld = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in1_ap_ack <= ap_const_logic_1;
        else 
            in1_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    in1_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, in1_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in1_blk_n <= in1_ap_vld;
        else 
            in1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in2_ap_vld_in_sig_assign_proc : process(in2_ap_vld, in2_ap_vld_preg)
    begin
        if ((in2_ap_vld = ap_const_logic_1)) then 
            in2_ap_vld_in_sig <= in2_ap_vld;
        else 
            in2_ap_vld_in_sig <= in2_ap_vld_preg;
        end if; 
    end process;


    in2_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, in2_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in2_blk_n <= in2_ap_vld;
        else 
            in2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in2_in_sig_assign_proc : process(in2, in2_preg, in2_ap_vld)
    begin
        if ((in2_ap_vld = ap_const_logic_1)) then 
            in2_in_sig <= in2;
        else 
            in2_in_sig <= in2_preg;
        end if; 
    end process;


    sum_0_ack_in_assign_proc : process(ap_start, ap_CS_fsm_state1, sum_0_vld_reg, sum_0_vld_in, sum_0_ack_out)
    begin
        if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (sum_0_vld_reg = ap_const_logic_0) and (sum_0_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (sum_0_ack_out = ap_const_logic_1) and (sum_0_vld_in = ap_const_logic_1) and (sum_0_vld_reg = ap_const_logic_1)))) then 
            sum_0_ack_in <= ap_const_logic_1;
        else 
            sum_0_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    sum_0_ack_out_assign_proc : process(sum_0_vld_out, sum_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((sum_1_ack_in = ap_const_logic_0) or (sum_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_0_ack_out <= ap_const_logic_1;
        else 
            sum_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    sum_0_vld_in <= sum_i_ap_vld;
    sum_0_vld_out <= sum_0_vld_reg;

    sum_1_ack_in_assign_proc : process(sum_1_vld_reg, sum_1_ack_out)
    begin
        if (((sum_1_vld_reg = ap_const_logic_0) or ((sum_1_ack_out = ap_const_logic_1) and (sum_1_vld_reg = ap_const_logic_1)))) then 
            sum_1_ack_in <= ap_const_logic_1;
        else 
            sum_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;

    sum_1_ack_out <= sum_o_ap_ack;

    sum_1_vld_in_assign_proc : process(sum_0_vld_out, sum_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((sum_1_ack_in = ap_const_logic_0) or (sum_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_1_vld_in <= ap_const_logic_1;
        else 
            sum_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sum_i_ap_ack <= sum_0_ack_in;

    sum_i_blk_n_assign_proc : process(sum_0_vld_reg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_i_blk_n <= sum_0_vld_reg;
        else 
            sum_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sum_o <= sum_1_data_reg;
    sum_o_ap_vld <= sum_1_vld_reg;

    sum_o_blk_n_assign_proc : process(sum_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sum_o_blk_n <= sum_1_ack_in;
        else 
            sum_o_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    temp_fu_55_p2 <= std_logic_vector(unsigned(in2_in_sig) + unsigned(in1));
    tmp_1_fu_61_p2 <= std_logic_vector(unsigned(sum_0_data_reg) + unsigned(temp_reg_67));
end behav;
